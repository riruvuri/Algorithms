-----------------------------------------------------------------
Breadth-First (Level Order Traversal)

// Initialize an empty result array
// Handle an empty tree as a special edge case
   (return empty result array)

// Create an empty queue and push the root of the tree into it.

// While the queue is not empty:
   // Count the number of nodes in the Queue
   // Repeat that many times:

      // Remove the next node from the front of the Queue
      // Append the value to the result array

      // If it has a left child, add the left child to the queue
      // If it has a right child, add the right child to the queue


List<List<Integer>> function getLevelOrder(TreeNode root) {

    List<List<Integer>> result = new List<>()

    if(root is null) return result

    Queue<TreeNode> nodeQ = new Queue()

    nodeQ.add(root)

    while(nodeQ is not empty){
        int count = nodeQ.size()

        List<Integer> temp = new List()

        for(int i=0; i<count; i++){

            TreeNode node = nodeQ.remove

            temp.add(node.val)

            // add children
            if(node.left is not null) nodeQ.add(node.left)
            if(node.right is not null) nodeQ.add(node.right)

        }
        result.add(temp)

    }
    return result

}
List<List<Integer>> function getLevelOrderNary(TreeNode root) {

    List<List<Integer>> result = new List<>()

    if(root is null) return result

    Queue<TreeNode> nodeQ = new Queue()

    nodeQ.add(root)

    while(nodeQ is not empty){
        int count = nodeQ.size()

        List<Integer> temp = new List()

        for(int i=0; i<count; i++){

            TreeNode node = nodeQ.remove

            temp.add(node.val)

            // add children
            foreach (child in node.children) {
                nodeQ.add(child)
            }

        }
        result.add(temp)

    }
    return result

}
List<List<Integer>> function getZigZagLevelOrder(TreeNode root) {

    List<List<Integer>> result = new List<>()
    boolean rightToLeft = false

    if(root is null) return result

    Queue<TreeNode> nodeQ = new Queue()

    nodeQ.add(root)

    while(nodeQ is not empty){
        int count = nodeQ.size()

        List<Integer> temp = new List()

        for(int i=0; i<count; i++){

            TreeNode node = nodeQ.remove

            temp.add(node.val)

            // add children
            if(node.left is not null) nodeQ.add(node.left)
            if(node.right is not null) nodeQ.add(node.right)

        }
        if(rightToLeft) temp.reverse()

        result.add(temp)
        rightToLeft = not rightToLeft
    }
    return result

}
------------------------------------------------------------------
Boundary Walk (Depth-first, Recursion)

// Handle an empty tree as a special edge case

// Create a recursive function to execute on every node.
// Function: dfs(node)
   // Base Case: If Leaf Node, then do something if necessary.
   // Recursive Case: (Not a leaf node)

   // Pre-Order: Process info before visiting either child

   // If the node has a LEFT child:  dfs(node.left)

   // In-Order : Process the information in sequence

   // If the node has a RIGHT child: dfs(node.right)

   // Post-Order: Process the information after both
      children have been visited


-------------------------------------------------------------
Top Down Depth-First

Flow of information travels from ROOT to LEAF

// Handle an empty tree as a special edge case
   (return empty result array)

// Create a recursive function to execute on every node.

// Function: topDownDFS ( node, information to be passed down)
   // Process information passed down (Pre-Order)

   // Base Case: If Leaf Node, then do something if necessary.

   // Recursive Case: (Not a leaf node)
   // If the node has a LEFT child:  topDownDFS(node.left, info)
   // If the node has a RIGHT child: topDownDFS(node.right, info)

   // Likely returns nothing back to the parent

boolean function hasPathSum(TreeNode root, int sum) {

    if(root is null) return false

    boolean psFlag = false

    function hasPathSumHelper(TreeNode node, int sum) {
        if(psFlag) return
        sum -= node.val

        if(node.left is null and node.right is null){
            if(sum == 0) psFlag = true
            return
        }

        // recursive code
        if(node.left is not null)
           hasPathSumHelper(node.left, sum)
        if(node.right is not null)
            hasPathSumHelper(node.right, sum)

    }
    hasPathSumHelper(root, sum)
    return psFlag

}

List<List<Integer>> function getSumPaths(TreeNode root, int sum) {

    List<List<Integer>> result = new List()
    if(root is null) return result

    function hasPathSumHelper(TreeNode node, int sum,
                             Stack<Integer> slate) {

        sum -= node.val
        slate.push(node.val)

        if(node.left is null and node.right is null){
            if(sum == 0) {
                result.add(slate.copy())
            }
            slate.pop()
            return
        }

        // recursive code
        if(node.left is not null)
           hasPathSumHelper(node.left, sum, slate)
        if(node.right is not null)
            hasPathSumHelper(node.right, sum, slate)

        slate.pop()

    }
    hasPathSumHelper(root, sum, new Stack<Integer>())
    return result

}

--------------------------------------------------------------
Bottom-Up Depth First

Flow of information travels from LEAF to ROOT

// Handle an empty tree as a special edge case
   (return empty result array)

// Create a recursive function to execute on every node.
// Function: bottomUpDFS ( node )

   // Base Case: (Leaf Node) Return required data back to the
      parent for processing.

   // Recursive Case: (Not a leaf node)
   // If the node has a LEFT child:
      resultLeft = bottomUpDfs(node.left)

   // If the node has a RIGHT child:
      resultRight = bottomUpDfs(node.right)

   // Process information sent back by child nodes (Post-Order)
   // Returns information back to the parent


int function getMaxDiameter(TreeNode root) {

    if(root is null) return 0

    int maxDiameter = 0

    int function getMaxDiameterHelper(TreeNode node) {

        if(node.left is null and node.right is null) return 0

        int maxL = 0
        int maxR = 0

        if(node.left is not null)
           maxL = getMaxDiameterHelper(node.left) + 1

        if(node.right is not null)
           maxR = getMaxDiameterHelper(node.right) + 1

        maxDiameter = (maxL + maxR > maxDiameter)
                    ? maxL + maxR
                    : maxDiameter

        return (maxL > maxR) ? maxL : maxR
    }
    getMaxDiameterHelper(root)
    return maxDiameter

}
int function getUnivalueSubtrees(TreeNode root) {
    if(root is null) return 0

    int univalCount = 0

    boolean function getUnivalSubtreesHelper(TreeNode node) {

        if(node.left is null and node.right is null){
            univalCount++  // O(1)
            return true
        }
        boolean leftIsUnival = true
        boolean rightIsUnival = true

        if(node.left is not null){
            leftIsUnival = getUnivalSubtreesHelper(node.left)
            leftIsUnival = (node.left.val == node.val) and leftIsUnival
        }
        if(node.right is not null){
            rightIsUnival = getUnivalSubtreesHelper(node.right)
            rightIsUnival = (node.right.val == node.val) and rightIsUnival

        }
        if(leftIsUnival and rightIsUnival) univalCount++
        return leftIsUnival and rightIsUnival

    }
    getUnivalSubtreesHelper(root)

    return univalCount
}


------------------------------------------------------------------
Tree Construction

Divide and Conquer

// Repeat for each node makeNode(array, start, end) and return a TreeNode.
    // if the start value is greater than the
       end value, return nothing (Null)

    // if the start value is equal to the end value,
       return a new tree node with the value array[start]

    // else, build the subtrees:

    // Identify the sub-tree root node value and
       root_index in the array

    // Create a new node with value array[root_index]

    // Identify the start and end position of
       the left subtree in the array.

    // Identify the start and end position of
       the right subtree in the array.

    // Recursive:
    // Set the node.left = makeNode(array, leftStart, leftEnd)
    // Set the node.right = makeNode(array, rightStart, rightEnd)

    // return the subtree node.

TreeNode function arrayToBst(int[] input) {

    TreeNode function arrayToBstHelper(int[] input, int s, int e) {

        if(s > e) return null

        if(s == e) return new TreeNode(input[s])

        int mid = s + (e-s)/2

        TreeNode root = new TreeNode(input[mid])

        root.left = arrayToBstHelper(input, s, mid-1)
        root.right = arrayToBstHelper(input, mid+1, e)

        return root
    }
    return arrayToBstHelper(input, 0, input.length-1)

}

TreeNode function arrayToBst(int[] preorder, int[] inorder) {

    Map<Integer, Integer> ioMap = new Map()

    for(int i = 0; i<inorder.length; i++){
        ioMap.put(inorder[i], i)
    }

    TreeNode function
          arrayToBstHelper(int[] preorder, int pos, int poe,
                           int[] inorder, int ios, int ioe) {

        if(pos > poe) return null

        if(pos == poe) return new TreeNode(preorder[pos])

        int rootIdx = ioMap.get(preorder[pos]) // O(1)
        int count = rootIdx - ios

        TreeNode root = new TreeNode(preorder[pos])

        root.left = arrayToBstHelper(preorder, pos+1, pos+count,
                                     inorder, ios, rootIdx-1)
        root.right = arrayToBstHelper(preorder, pos+count+1, poe,
                                      inorder, rootIdx+1, ioe)

        return root
    }
    return arrayToBstHelper(preorder, 0, preorder.length-1,
                            inorder, 0, inorder.length-1)

}
Leetcode Questions Covered:

102: Binary Tree Level Order Traversal
429: N-ary Tree Level Order Traversal
103: Binary Tree Zigzag Level Order Traversal
199: Binary Tree Right Side View
107: Binary Tree Level Order Traversal II

112: Path Sum
113: Path Sum II

543: Diameter of Binary Tree
250: Count Univalue Subtrees

108: Convert Sorted Array to Binary Search Tree
105: Construct Binary Tree from Preorder and Inorder Traversal


